{
  "model": "gpt-4",
  "messages": [
    {
      "role": "system",
      "content": "Eres un generador de código Java. Fusiona y devuelve solo una clase final completa y corregida."
    },
    {
      "role": "user",
      "content": "--- CLASE ORIGINAL EXISTENTE ---\npackage test.core.api.repository;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport test.core.api.model.Employee;\nimport java.util.Date;\nimport java.util.List;\npublic interface EmployeeRepository extends JpaRepository<Employee, Long> {\n}\n\n--- CLASE GENERADA POR IA ---\npackage test.core.api.repository;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport test.core.api.model.Employee;\nimport java.util.List;\npublic interface EmployeeRepository extends JpaRepository<Employee, Long> {\n    // Inicio de cambio realizado por la IA\n    @Query(\"SELECT e FROM Employee e WHERE e.gender = :gender\")\n    List<Employee> findByGender(@Param(\"gender\") String gender);\n    @Query(\"SELECT e FROM Employee e WHERE YEAR(e.birthDate) < :year\")\n    List<Employee> findBornBeforeYear(@Param(\"year\") int year);\n    @Query(\"SELECT e FROM Employee e ORDER BY e.position\")\n    List<Employee> findAllOrderByPosition();\n    // Fin de cambio realizado por la IA\n}\n\n--- INSTRUCCIONES ---\nFusiona ambas clases asegurando lo siguiente:\\n- Mantén todos los métodos válidos de la clase original.\\n- Agrega los métodos nuevos de la clase generada.\\n- Reemplaza métodos si tienen la misma firma pero diferente cuerpo.\\n- No elimines métodos válidos del original que no estén en la nueva.\\n- Devuelve solo una clase Java válida (sin explicaciones, sin texto extra, sin backticks)."
    }
  ],
  "temperature": 0.3
}
