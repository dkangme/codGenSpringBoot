{
  "id": "chatcmpl-BgwyRETBB9aFjmyr988vWvLVSbLLK",
  "object": "chat.completion",
  "created": 1749576171,
  "model": "gpt-4-0613",
  "choices": [
    {
      "index": 0,
      "message": {
        "role": "assistant",
        "content": "package test.core.api.repository;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport test.core.api.model.Employee;\n\nimport java.util.List;\n\npublic interface EmployeeRepository extends JpaRepository<Employee, Long> {\n\n    // Inicio de cambio realizado por la IA\n    @Query(\"SELECT e FROM Employee e WHERE e.gender = :gender\")\n    List<Employee> findByGender(@Param(\"gender\") String gender);\n\n    @Query(\"SELECT e FROM Employee e WHERE YEAR(e.birthDate) < :year\")\n    List<Employee> findBornBeforeYear(@Param(\"year\") int year);\n\n    @Query(\"SELECT e FROM Employee e ORDER BY e.position\")\n    List<Employee> findAllOrderByPosition();\n    // Fin de cambio realizado por la IA\n}\n\npackage test.core.api.service;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport test.core.api.model.Employee;\nimport test.core.api.repository.EmployeeRepository;\n\nimport java.util.List;\n\n@Service\npublic class EmployeeService {\n\n    private final EmployeeRepository employeeRepository;\n\n    @Autowired\n    public EmployeeService(EmployeeRepository employeeRepository) {\n        this.employeeRepository = employeeRepository;\n    }\n\n    // Inicio de cambio realizado por la IA\n    public void deleteEmployee(Long id) {\n        Employee employee = employeeRepository.findById(id).orElseThrow(() -> new RuntimeException(\"Employee not found\"));\n        if (employee.getGender().equalsIgnoreCase(\"Femenino\")) {\n            throw new RuntimeException(\"Cannot delete female employees\");\n        }\n        employeeRepository.delete(employee);\n    }\n\n    public List<Employee> getEmployeesBornBeforeYear(int year) {\n        return employeeRepository.findBornBeforeYear(year);\n    }\n\n    public List<Employee> getEmployeesOrderByPosition() {\n        return employeeRepository.findAllOrderByPosition();\n    }\n    // Fin de cambio realizado por la IA\n}\n\npackage test.core.api.controller;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\nimport test.core.api.model.Employee;\nimport test.core.api.service.EmployeeService;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api/employees\")\npublic class EmployeeController {\n\n    private final EmployeeService employeeService;\n\n    @Autowired\n    public EmployeeController(EmployeeService employeeService) {\n        this.employeeService = employeeService;\n    }\n\n    // Inicio de cambio realizado por la IA\n    @DeleteMapping(\"/{id}\")\n    public void deleteEmployee(@PathVariable Long id) {\n        employeeService.deleteEmployee(id);\n    }\n\n    @GetMapping(\"/born-before/{year}\")\n    public List<Employee> getEmployeesBornBeforeYear(@PathVariable int year) {\n        return employeeService.getEmployeesBornBeforeYear(year);\n    }\n\n    @GetMapping(\"/order-by-position\")\n    public List<Employee> getEmployeesOrderByPosition() {\n        return employeeService.getEmployeesOrderByPosition();\n    }\n    // Fin de cambio realizado por la IA\n}\n\npackage test.core.api.service;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport test.core.api.model.Employee;\n\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\n@SpringBootTest\nclass EmployeeServiceTest {\n\n    @Autowired\n    private EmployeeService employeeService;\n\n    // Inicio de cambio realizado por la IA\n    @Test\n    void deleteEmployee() {\n        assertThrows(RuntimeException.class, () -> employeeService.deleteEmployee(1L));\n    }\n\n    @Test\n    void getEmployeesBornBeforeYear() {\n        List<Employee> employees = employeeService.getEmployeesBornBeforeYear(2000);\n        assertTrue(employees.stream().allMatch(e -> e.getBirthDate().getYear() < 2000));\n    }\n\n    @Test\n    void getEmployeesOrderByPosition() {\n        List<Employee> employees = employeeService.getEmployeesOrderByPosition();\n        assertTrue(employees.stream().sorted((e1, e2) -> e1.getPosition().compareTo(e2.getPosition())).equals(employees));\n    }\n    // Fin de cambio realizado por la IA\n}\n\npackage test.core.api.controller;\n\nimport org.junit.jupiter.api.Test;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport org.springframework.boot.test.web.client.TestRestTemplate;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport test.core.api.model.Employee;\n\nimport java.util.List;\n\nimport static org.junit.jupiter.api.Assertions.*;\n\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\nclass EmployeeControllerTest {\n\n    @Autowired\n    private TestRestTemplate restTemplate;\n\n    // Inicio de cambio realizado por la IA\n    @Test\n    void deleteEmployee() {\n        ResponseEntity<String> response = restTemplate.exchange(\"/api/employees/1\", HttpMethod.DELETE, null, String.class);\n        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());\n    }\n\n    @Test\n    void getEmployeesBornBeforeYear() {\n        ResponseEntity<List> response = restTemplate.getForEntity(\"/api/employees/born-before/2000\", List.class);\n        assertEquals(HttpStatus.OK, response.getStatusCode());\n    }\n\n    @Test\n    void getEmployeesOrderByPosition() {\n        ResponseEntity<List> response = restTemplate.getForEntity(\"/api/employees/order-by-position\", List.class);\n        assertEquals(HttpStatus.OK, response.getStatusCode());\n    }\n    // Fin de cambio realizado por la IA\n}",
        "refusal": null,
        "annotations": []
      },
      "logprobs": null,
      "finish_reason": "stop"
    }
  ],
  "usage": {
    "prompt_tokens": 1513,
    "completion_tokens": 1061,
    "total_tokens": 2574,
    "prompt_tokens_details": {
      "cached_tokens": 0,
      "audio_tokens": 0
    },
    "completion_tokens_details": {
      "reasoning_tokens": 0,
      "audio_tokens": 0,
      "accepted_prediction_tokens": 0,
      "rejected_prediction_tokens": 0
    }
  },
  "service_tier": "default",
  "system_fingerprint": null
}
