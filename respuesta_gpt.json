{
  "id": "chatcmpl-BgjkbnwaELEz6fgvPhMvNtQlsQmhr",
  "object": "chat.completion",
  "created": 1749525341,
  "model": "gpt-4-0613",
  "choices": [
    {
      "index": 0,
      "message": {
        "role": "assistant",
        "content": "package test.core.api.repository;\n\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.data.jpa.repository.Query;\nimport org.springframework.data.repository.query.Param;\nimport test.core.api.model.Employee;\n\nimport java.util.Date;\nimport java.util.List;\n\npublic interface EmployeeRepository extends JpaRepository<Employee, Long> {\n\n    // Existing methods...\n\n    // Start of AI modifications\n    @Query(\"SELECT e FROM Employee e WHERE e.birthDate < :date\")\n    List<Employee> findEmployeesBornBefore(@Param(\"date\") Date date);\n    // End of AI modifications\n}\n\npackage test.core.api.service;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport test.core.api.model.Employee;\nimport test.core.api.repository.EmployeeRepository;\nimport test.core.api.exception.CannotDeleteEmployeeException;\n\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.List;\n\n@Service\npublic class EmployeeService {\n\n    @Autowired\n    private EmployeeRepository employeeRepository;\n\n    public void deleteEmployee(Long id) throws CannotDeleteEmployeeException {\n        Employee employee = employeeRepository.findById(id).orElse(null);\n        if (employee != null && \"Femenino\".equals(employee.getGender())) {\n            throw new CannotDeleteEmployeeException(\"Cannot delete female employee\");\n        }\n        employeeRepository.deleteById(id);\n    }\n\n    public List<Employee> getEmployeesBornBefore2000() {\n        Calendar calendar = Calendar.getInstance();\n        calendar.set(2000, Calendar.JANUARY, 1);\n        Date date = calendar.getTime();\n        return employeeRepository.findEmployeesBornBefore(date);\n    }\n}\n\npackage test.core.api.controller;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.DeleteMapping;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RestController;\nimport test.core.api.model.Employee;\nimport test.core.api.service.EmployeeService;\n\nimport java.util.List;\n\n@RestController\npublic class EmployeeController {\n\n    @Autowired\n    private EmployeeService employeeService;\n\n    @DeleteMapping(\"/employees/{id}\")\n    public ResponseEntity<Void> deleteEmployee(@PathVariable Long id) {\n        try {\n            employeeService.deleteEmployee(id);\n            return ResponseEntity.noContent().build();\n        } catch (Exception e) {\n            return ResponseEntity.badRequest().build();\n        }\n    }\n\n    @GetMapping(\"/employees/born-before-2000\")\n    public List<Employee> getEmployeesBornBefore2000() {\n        return employeeService.getEmployeesBornBefore2000();\n    }\n}\n\npackage test.core.api.exception;\n\npublic class CannotDeleteEmployeeException extends Exception {\n\n    public CannotDeleteEmployeeException(String message) {\n        super(message);\n    }\n}\n\npackage test.core.api.service;\n\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport org.mockito.InjectMocks;\nimport org.mockito.Mock;\nimport org.mockito.MockitoAnnotations;\nimport test.core.api.model.Employee;\nimport test.core.api.repository.EmployeeRepository;\nimport test.core.api.exception.CannotDeleteEmployeeException;\n\nimport java.util.Calendar;\nimport java.util.Date;\nimport java.util.Optional;\n\nimport static org.junit.jupiter.api.Assertions.assertThrows;\nimport static org.mockito.Mockito.*;\n\npublic class EmployeeServiceTest {\n\n    @InjectMocks\n    private EmployeeService employeeService;\n\n    @Mock\n    private EmployeeRepository employeeRepository;\n\n    @BeforeEach\n    public void setup() {\n        MockitoAnnotations.initMocks(this);\n    }\n\n    @Test\n    public void testDeleteEmployee() throws CannotDeleteEmployeeException {\n        Employee employee = new Employee();\n        employee.setGender(\"Masculino\");\n        when(employeeRepository.findById(anyLong())).thenReturn(Optional.of(employee));\n\n        employeeService.deleteEmployee(1L);\n\n        verify(employeeRepository, times(1)).deleteById(anyLong());\n    }\n\n    @Test\n    public void testDeleteEmployeeException() {\n        Employee employee = new Employee();\n        employee.setGender(\"Femenino\");\n        when(employeeRepository.findById(anyLong())).thenReturn(Optional.of(employee));\n\n        assertThrows(CannotDeleteEmployeeException.class, () -> {\n            employeeService.deleteEmployee(1L);\n        });\n    }\n\n    @Test\n    public void testGetEmployeesBornBefore2000() {\n        Calendar calendar = Calendar.getInstance();\n        calendar.set(2000, Calendar.JANUARY, 1);\n        Date date = calendar.getTime();\n\n        employeeService.getEmployeesBornBefore2000();\n\n        verify(employeeRepository, times(1)).findEmployeesBornBefore(date);\n    }\n}",
        "refusal": null,
        "annotations": []
      },
      "logprobs": null,
      "finish_reason": "stop"
    }
  ],
  "usage": {
    "prompt_tokens": 1405,
    "completion_tokens": 891,
    "total_tokens": 2296,
    "prompt_tokens_details": {
      "cached_tokens": 0,
      "audio_tokens": 0
    },
    "completion_tokens_details": {
      "reasoning_tokens": 0,
      "audio_tokens": 0,
      "accepted_prediction_tokens": 0,
      "rejected_prediction_tokens": 0
    }
  },
  "service_tier": "default",
  "system_fingerprint": null
}
